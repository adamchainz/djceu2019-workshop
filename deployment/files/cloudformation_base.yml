AWSTemplateFormatVersion: 2010-09-09

Description: Base resources Django Application running on Lambda + API Gateway

Parameters:

  WorkshopId:
    Type: String

Resources:

  # IAM User you are using to do this workshop

  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref WorkshopId

  IAMUserAllowWorkshopActions:
    Type: AWS::IAM::Policy
    Properties:
      Users:
      - !Ref IAMUser
      PolicyName: AllowWorkshopActions
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - cloudformation:DescribeStackEvents
          - cloudformation:DescribeStacks
          - cloudformation:ListStackResources
          - cloudformation:UpdateStack
          Resource:
          - !Sub arn:aws:cloudformation:*:${AWS::AccountId}:stack/${WorkshopId}-*
        - Effect: Allow
          Action:
          - lambda:UpdateFunctionCode
          - lambda:GetFunctionConfiguration
          Resource:
          - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${WorkshopId}-*
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource:
          - !Sub ${PackageS3Bucket.Arn}/*
        - Effect: Allow
          Action:
          - apigateway:*
          Resource: "*"

  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser

  # IAM Role that the API runs with

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole

  LambdaIAMRoleAllowLogging:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !Ref LambdaIAMRole
      PolicyName: AllowLogging
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*
          - !Sub arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*:*

  # S3 Bucket to upload the Lambda package into

  PackageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
      LifecycleConfiguration:
        Rules:
        - Id: Old versions disappear
          NoncurrentVersionExpirationInDays: 7
          Status: Enabled
        - Id: ExpireMultipartUploads
          Status: Enabled
          AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1

Outputs:

  IAMUserAccessKeyId:
    Value: !Ref IAMUserAccessKey

  IAMUserSecretAccessKey:
    Value: !GetAtt IAMUserAccessKey.SecretAccessKey

  LambdaIAMRoleArn:
    Value: !GetAtt LambdaIAMRole.Arn

  PackageS3Bucket:
    Value: !Ref PackageS3Bucket
